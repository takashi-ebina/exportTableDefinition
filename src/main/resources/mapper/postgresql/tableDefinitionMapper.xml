<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.export_table_definition.domain.repository.postgresql.TableDefinitionRepository">

<select id="selectBaseInfo" resultType="BaseInfoDto">
SELECT current_database() AS "dbName", concat('|', 'PostgreSQL', '|', current_database(), '|', to_char(current_timestamp, 'yyyy/MM/dd'), '|') AS "baseInfo" fetch first 1 rows only;
</select>

<select id="selectAllTableInfo" resultType="AllTableDto">
WITH all_tables AS (
    SELECT 
        coalesce(t1.schemaname, '') AS schema_name,
        'table' AS table_type,
        coalesce(regexp_replace(pg_catalog.obj_description(concat(t1.schemaname, '.', t1.tablename)::regclass),'\r|\n|\r\n', '', 'g'), '') AS logical_table_name,
        coalesce(t1.tablename, '') AS physical_table_name,
        '' AS remarks,
        concat('[■](./', current_database(), '/', t1.schemaname, '/table/', t1.tablename, '.md)') AS link,
        '' AS definition
    FROM pg_catalog.pg_tables t1
    WHERE t1.schemaname NOT IN ('pg_catalog', 'information_schema')
    <if test="schemaList != null and schemaList.size() > 0">
        AND t1.schemaname IN
        <foreach item="schema" index="index" collection="schemaList"
            open="(" separator="," close=")">
            #{schema}
        </foreach>
    </if>
    <if test="tableList != null and tableList.size() > 0">
        AND t1.tablename IN
        <foreach item="table" index="index" collection="tableList"
            open="(" separator="," close=")">
            #{table}
        </foreach>
    </if>
    
    UNION ALL

    SELECT 
        coalesce(t2.schemaname, '') AS schema_name,
        'view' AS table_type,
        coalesce(regexp_replace(obj_description(concat(t2.schemaname, '.', t2.viewname)::regclass),'\r|\n|\r\n', '', 'g'), '') AS logical_table_name,
        coalesce(t2.viewname, '') AS physical_table_name,
        ' ' AS remarks,
        concat('[■](./', current_database(), '/', t2.schemaname, '/view/', t2.viewname, '.md)') AS link,
        definition AS definition
    FROM pg_catalog.pg_views t2
    WHERE t2.schemaname NOT IN ('pg_catalog', 'information_schema')
    <if test="schemaList != null and schemaList.size() > 0">
        AND t2.schemaname IN
        <foreach item="schema" index="index" collection="schemaList"
            open="(" separator="," close=")">
            #{schema}
        </foreach>
    </if>
    <if test="tableList != null and tableList.size() > 0">
        AND t2.tablename IN
        <foreach item="table" index="index" collection="tableList"
            open="(" separator="," close=")">
            #{table}
        </foreach>
    </if>

    UNION ALL

    SELECT 
        coalesce(t3.schemaname, '') AS schema_name,
        'materialized_view' AS table_type,
        coalesce(regexp_replace(obj_description(concat(t3.schemaname, '.', t3.matviewname)::regclass),'\r|\n|\r\n', '', 'g'), '') AS logical_table_name,
        coalesce(t3.matviewname, '') AS physical_table_name,
        ' ' AS remarks,
        concat('[■](./', current_database(), '/', t3.schemaname, '/materialized_view/', t3.matviewname, '.md)') AS link,
        definition AS definition
    FROM pg_catalog.pg_matviews t3
    WHERE t3.schemaname NOT IN ('pg_catalog', 'information_schema')
    <if test="schemaList != null and schemaList.size() > 0">
        AND t3.schemaname IN
        <foreach item="schema" index="index" collection="schemaList"
            open="(" separator="," close=")">
            #{schema}
        </foreach>
    </if>
    <if test="tableList != null and tableList.size() > 0">
        AND t3.tablename IN
        <foreach item="table" index="index" collection="tableList"
            open="(" separator="," close=")">
            #{table}
        </foreach>
    </if>
)
SELECT 
    schema_name AS "schemaName"
    , logical_table_name AS "logicalTableName"
    , physical_table_name AS "physicalTableName"
    , table_type AS "tableType"
    , concat('|', row_number() over (ORDER BY schema_name, physical_table_name), '|', schema_name, '|', logical_table_name, '|', physical_table_name, '|', table_type, '|', link, '|', remarks, '|') AS "tableInfoList"
    , concat('|', schema_name, '|', logical_table_name, '|', physical_table_name, '|', table_type, '|', remarks, '|') AS "tableInfo"
    , definition AS definition
FROM all_tables
ORDER BY 
    schema_name, physical_table_name;
</select>

<select id="selectAllColumnInfo" resultType="AllColumnDto">
WITH all_columns AS (
    (
        SELECT
            t1.schemaname AS schema_name,
            t1.tablename AS table_name,
            row_number() over (PARTITION BY t1.schemaname, t1.tablename ORDER BY t3.attnum) AS column_num,
            coalesce(substring(coalesce((t4.description), ''), '^[^\t\r\n\(（]*'), '') AS logical_column_name,
            t3.attname AS physical_column_name,
            pg_catalog.format_type(t3.atttypid, t3.atttypmod) AS column_type,
            coalesce((
                SELECT '○'
                FROM pg_catalog.pg_constraint c
                WHERE c.conrelid = t2.oid
                AND t3.attnum = ANY (c.conkey)
                AND c.contype = 'p'
            ), '') AS primary_key,
            CASE t3.attnotnull 
                WHEN true THEN '○' 
                ELSE '' 
            END AS not_null,
            coalesce((
                SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)
                FROM pg_catalog.pg_attrdef d
                WHERE d.adrelid = t3.attrelid
                AND d.adnum = t3.attnum
            ), ' ') AS default_value,
            regexp_replace(coalesce(substring(coalesce((t4.description), ''), '^.*[\t\r\n\(（]+(.*)'), ''), '[\\）)]$', '', 'g') AS remarks
        FROM
            pg_catalog.pg_tables t1
            LEFT OUTER JOIN pg_catalog.pg_class t2
                ON t1.tablename = t2.relname
            LEFT OUTER JOIN pg_catalog.pg_attribute t3
                ON t2.oid = t3.attrelid
            LEFT OUTER JOIN pg_catalog.pg_description t4
                ON t3.attrelid = t4.objoid AND t3.attnum = t4.objsubid
        WHERE
            t1.schemaname NOT IN ('pg_catalog', 'information_schema')
            AND t2.relkind = 'r'
            AND t3.attnum > 0
            AND t3.attname NOT LIKE '%pg.dropped%'
            <if test="schemaList != null and schemaList.size() > 0">
                AND t1.schemaname IN
                <foreach item="schema" index="index" collection="schemaList"
                    open="(" separator="," close=")">
                    #{schema}
                </foreach>
            </if>
            <if test="tableList != null and tableList.size() > 0">
                AND t1.tablename IN
                <foreach item="table" index="index" collection="tableList"
                    open="(" separator="," close=")">
                    #{table}
                </foreach>
            </if>
        ORDER BY
            t1.schemaname, t1.tablename, t3.attnum
    )    
    UNION ALL
    (
        SELECT
            t1.schemaname AS schema_name,
            t1.viewname AS table_name,
            row_number() over (PARTITION BY t1.schemaname, t1.viewname ORDER BY t3.attnum) AS column_num,
            coalesce(substring(coalesce((t4.description), ''), '^[^\t\r\n\(（]*'), '') AS logical_column_name,
            t3.attname AS physical_column_name,
            pg_catalog.format_type(t3.atttypid, t3.atttypmod) AS column_type,
            coalesce((
                SELECT '○'
                FROM pg_catalog.pg_constraint c
                WHERE c.conrelid = t2.oid
                AND t3.attnum = ANY (c.conkey)
                AND c.contype = 'p'
            ), '') AS primary_key,
            CASE t3.attnotnull 
                WHEN true THEN '○' 
                ELSE '' 
            END AS not_null,
            coalesce((
                SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)
                FROM pg_catalog.pg_attrdef d
                WHERE d.adrelid = t3.attrelid
                AND d.adnum = t3.attnum
            ), ' ') AS default_value,
            regexp_replace(coalesce(substring(coalesce((t4.description), ''), '^.*[\t\r\n\(（]+(.*)'), ''), '[\\）)]$', '', 'g') AS remarks
        FROM
            pg_catalog.pg_views t1
            LEFT OUTER JOIN pg_catalog.pg_class t2
                ON t1.viewname = t2.relname
            LEFT OUTER JOIN pg_catalog.pg_attribute t3
                ON t2.oid = t3.attrelid
            LEFT OUTER JOIN pg_catalog.pg_description t4
                ON t3.attrelid = t4.objoid AND t3.attnum = t4.objsubid
        WHERE
            t1.schemaname NOT IN ('pg_catalog', 'information_schema')
            AND t2.relkind = 'v'
            AND t3.attnum > 0
            AND t3.attname NOT LIKE '%pg.dropped%'
            <if test="schemaList != null and schemaList.size() > 0">
                AND t1.schemaname IN
                <foreach item="schema" index="index" collection="schemaList"
                    open="(" separator="," close=")">
                    #{schema}
                </foreach>
            </if>
            <if test="tableList != null and tableList.size() > 0">
                AND t1.viewname IN
                <foreach item="table" index="index" collection="tableList"
                    open="(" separator="," close=")">
                    #{table}
                </foreach>
            </if>
        ORDER BY
            t1.schemaname, t1.viewname, t3.attnum
    )
    UNION ALL
    (
        SELECT
            t1.schemaname AS schema_name,
            t1.matviewname AS table_name,
            row_number() over (PARTITION BY t1.schemaname, t1.matviewname ORDER BY t3.attnum) AS column_num,
            coalesce(substring(coalesce((t4.description), ''), '^[^\t\r\n\(（]*'), '') AS logical_column_name,
            t3.attname AS physical_column_name,
            pg_catalog.format_type(t3.atttypid, t3.atttypmod) AS column_type,
            coalesce((
                SELECT '○'
                FROM pg_catalog.pg_constraint c
                WHERE c.conrelid = t2.oid
                AND t3.attnum = ANY (c.conkey)
                AND c.contype = 'p'
            ), '') AS primary_key,
            CASE t3.attnotnull 
                WHEN true THEN '○' 
                ELSE '' 
            END AS not_null,
            coalesce((
                SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)
                FROM pg_catalog.pg_attrdef d
                WHERE d.adrelid = t3.attrelid
                AND d.adnum = t3.attnum
            ), ' ') AS default_value,
            regexp_replace(coalesce(substring(coalesce((t4.description), ''), '^.*[\t\r\n\(（]+(.*)'), ''), '[\\）)]$', '', 'g') AS remarks
        FROM
            pg_catalog.pg_matviews t1
            LEFT OUTER JOIN pg_catalog.pg_class t2
                ON t1.matviewname = t2.relname
            LEFT OUTER JOIN pg_catalog.pg_attribute t3
                ON t2.oid = t3.attrelid
            LEFT OUTER JOIN pg_catalog.pg_description t4
                ON t3.attrelid = t4.objoid AND t3.attnum = t4.objsubid
        WHERE
            t1.schemaname NOT IN ('pg_catalog', 'information_schema')
            AND t2.relkind = 'm'
            AND t3.attnum > 0
            AND t3.attname NOT LIKE '%pg.dropped%'
            <if test="schemaList != null and schemaList.size() > 0">
                AND t1.schemaname IN
                <foreach item="schema" index="index" collection="schemaList"
                    open="(" separator="," close=")">
                    #{schema}
                </foreach>
            </if>
            <if test="tableList != null and tableList.size() > 0">
                AND t1.matviewname IN
                <foreach item="table" index="index" collection="tableList"
                    open="(" separator="," close=")">
                    #{table}
                </foreach>
            </if>
        ORDER BY
            t1.schemaname, t1.matviewname, t3.attnum
    )
)
SELECT
    schema_name AS "schemaName",
    table_name AS "tableName",
    concat('|', column_num, '|', logical_column_name, '|', physical_column_name, '|', column_type, '|', primary_key, '|', not_null, '|', default_value, '|', remarks, '|') AS "columnInfo"
FROM
    all_columns
ORDER BY
    schema_name, table_name, column_num;
</select>

<select id="selectAllIndexInfo" resultType="AllIndexDto">
WITH all_indexes AS (
    SELECT
        t5.schemaname AS schema_name,
        t1.relname AS table_name,
        t2.relname AS index_name,
        coalesce(array_to_string(array_agg(t4.attname ORDER BY t4.attnum), ','), '') AS column_names
    FROM
        pg_class AS t1
    LEFT OUTER JOIN
        pg_index AS t3 ON t1.oid = t3.indrelid
    LEFT OUTER JOIN
        pg_class AS t2 ON t2.oid = t3.indexrelid
    LEFT OUTER JOIN
        pg_attribute AS t4 ON t4.attrelid = t1.oid AND t4.attnum = ANY(t3.indkey)
    LEFT OUTER JOIN
        pg_tables AS t5 ON t1.relname = t5.tablename
    WHERE
        t3.indisprimary = false
        AND t3.indisunique = false
        AND t1.relkind = 'r'
        AND t5.schemaname NOT IN ('pg_catalog', 'information_schema')
        <if test="schemaList != null and schemaList.size() > 0">
            AND t5.schemaname IN
            <foreach item="schema" index="index" collection="schemaList"
                open="(" separator="," close=")">
                #{schema}
            </foreach>
        </if>
        <if test="tableList != null and tableList.size() > 0">
            AND t1.relname IN
            <foreach item="table" index="index" collection="tableList"
                open="(" separator="," close=")">
                #{table}
            </foreach>
        </if>
    GROUP BY
        t5.schemaname, t1.relname, t2.relname
)
SELECT
    schema_name AS "schemaName",
    table_name AS "tableName",
    CASE WHEN index_name IS NOT NULL THEN
        concat('|', row_number() over (PARTITION BY schema_name, table_name ORDER BY index_name), '|', index_name, '|', column_names, '|')
    ELSE NULL END AS "indexInfo"
FROM
    all_indexes
ORDER BY
    schema_name, table_name;
</select>

<select id="selectAllConstraintInfo" resultType="AllConstraintDto">
WITH all_constraints AS (
    SELECT
        t3.nspname AS schema_name,
        t2.relname AS table_name,
        t1.conname AS constraints_name,
        CASE t1.contype 
            WHEN 'c' THEN 'CHECK' 
            WHEN 'f' THEN 'FOREIGN KEY' 
            WHEN 'p' THEN 'PRIMARY KEY' 
            WHEN 'u' THEN 'UNIQUE' 
            ELSE NULL 
        END AS constraints_type,
        pg_get_constraintdef(t1.oid) AS constraints_definition
    FROM
        pg_catalog.pg_constraint t1
    LEFT OUTER JOIN pg_catalog.pg_class t2
        ON t1.conrelid = t2.oid
    LEFT OUTER JOIN pg_catalog.pg_namespace t3
        ON t2.relnamespace = t3.oid
    WHERE
        t1.contype in ('c', 'f', 'p', 'u')
        AND t3.nspname NOT IN ('pg_catalog', 'information_schema')
        <if test="schemaList != null and schemaList.size() > 0">
            AND t3.nspname IN
            <foreach item="schema" index="index" collection="schemaList"
                open="(" separator="," close=")">
                #{schema}
            </foreach>
        </if>
        <if test="tableList != null and tableList.size() > 0">
            AND t2.relname IN
            <foreach item="table" index="index" collection="tableList"
                open="(" separator="," close=")">
                #{table}
            </foreach>
        </if>
)
SELECT
    schema_name AS "schemaName",
    table_name AS "tableName",
    concat('|', row_number() over (PARTITION BY schema_name, table_name ORDER BY constraints_type, constraints_name), '|', constraints_name, '|', constraints_type, '|', constraints_definition, '|') AS "constraintInfo"
FROM
    all_constraints
ORDER BY
    schema_name, table_name, constraints_type, constraints_name;
</select>

<select id="selectAllForeignkeyInfo" resultType="AllForeignkeyDto">
WITH all_foreignkeys AS (
    SELECT
        t1.constraint_name AS foreignkey_name,
        t2.table_schema AS schema_name,
        t2.table_name AS table_name,
        coalesce(array_to_string(array_agg(DISTINCT t2.column_name), ','), '') AS column_names,
        t3.table_schema AS reference_schema_name,
        t3.table_name AS reference_table_name,
        coalesce(array_to_string(array_agg(DISTINCT t3.column_name), ','), '') AS reference_column_names
    FROM
        information_schema.table_constraints AS t1
    LEFT OUTER JOIN information_schema.key_column_usage AS t2
        ON t1.constraint_name = t2.constraint_name
        AND t1.constraint_catalog = t2.table_catalog
        AND t1.constraint_schema = t2.table_schema
        AND t1.table_name = t2.table_name
    LEFT OUTER JOIN information_schema.constraint_column_usage AS t3
        ON t2.constraint_name = t3.constraint_name
        AND t2.table_catalog = t3.constraint_catalog
        AND t2.table_schema = t3.constraint_schema
    WHERE
        t1.constraint_type = 'FOREIGN KEY'
        AND t1.constraint_schema NOT IN ('pg_catalog', 'information_schema')
        <if test="schemaList != null and schemaList.size() > 0">
            AND t1.constraint_schema IN
            <foreach item="schema" index="index" collection="schemaList"
                open="(" separator="," close=")">
                #{schema}
            </foreach>
        </if>
        <if test="tableList != null and tableList.size() > 0">
            AND t2.table_schema IN
            <foreach item="table" index="index" collection="tableList"
                open="(" separator="," close=")">
                #{table}
            </foreach>
        </if>
    GROUP BY
        t1.constraint_name, t2.table_schema, t2.table_name, t3.table_schema, t3.table_name
    ORDER BY 
        t1.constraint_name, t2.table_schema, t2.table_name, t3.table_schema, t3.table_name
)
SELECT
    schema_name AS "schemaName",
    table_name AS "tableName",
    CASE WHEN foreignkey_name IS NOT NULL THEN
        concat('|', row_number() over (PARTITION BY schema_name, table_name ORDER BY foreignkey_name), 
        '|', foreignkey_name, '|', column_names, '|', reference_schema_name, '.' , reference_table_name, '|', reference_column_names, '|')
    ELSE NULL END AS "foreignkeyInfo"
FROM
    all_foreignkeys
ORDER BY
    schema_name, table_name;
</select>

</mapper>